{"ast":null,"code":"import Platform from \"react-native-web/dist/exports/Platform\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport { GoogleMaps, AppleMaps, CityMapper, Uber, Lyft, Transit, Waze, Moovit } from \"./img\";\nvar apps = [{\n  name: 'apple-maps',\n  title: 'Apple Maps',\n  prefixe: Platform.OS === 'ios' ? 'http://maps.apple.com/' : 'applemaps://',\n  icon: AppleMaps\n}, {\n  name: 'google-maps',\n  title: 'Google Maps',\n  prefixe: Platform.OS === 'ios' ? 'comgooglemaps://' : 'https://maps.google.com/',\n  icon: GoogleMaps\n}, {\n  name: 'citymapper',\n  title: 'Citymapper',\n  prefixe: 'citymapper://',\n  icon: CityMapper\n}, {\n  name: 'uber',\n  title: 'Uber',\n  prefixe: 'uber://',\n  icon: Uber\n}, {\n  name: 'lyft',\n  title: 'Lyft',\n  prefixe: 'lyft://',\n  icon: Lyft\n}, {\n  name: 'transit',\n  title: 'The Transit App',\n  prefixe: 'transit://',\n  icon: Transit\n}, {\n  name: 'waze',\n  title: 'Waze',\n  prefixe: 'waze://',\n  icon: Waze\n}, {\n  name: 'moovit',\n  title: 'Moovit',\n  prefixe: 'moovit://',\n  icon: Moovit\n}];\n\nvar isAppInstalled = function isAppInstalled(app) {\n  return new Promise(function (resolve) {\n    Linking.canOpenURL(app).then(function (result) {\n      resolve(!!result);\n    }).catch(function () {\n      resolve(false);\n    });\n  });\n};\n\nexport var getApps = function getApps() {\n  var promises = apps.map(function (app) {\n    return isAppInstalled(app.prefixe).then(function (ret) {\n      return ret ? app : null;\n    });\n  });\n  return Promise.all(promises).then(function (returnPromises) {\n    return returnPromises.filter(function (app) {\n      return app;\n    });\n  });\n};","map":{"version":3,"sources":["/Users/bandaralmutairi/Desktop/Hayat project/FE_bloodDonation/node_modules/react-native-open-map/src/Apps.js"],"names":["GoogleMaps","AppleMaps","CityMapper","Uber","Lyft","Transit","Waze","Moovit","apps","name","title","prefixe","Platform","OS","icon","isAppInstalled","app","Promise","resolve","Linking","canOpenURL","then","result","catch","getApps","promises","map","ret","all","returnPromises","filter"],"mappings":";;AAEA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,UAAhC,EAA4CC,IAA5C,EAAkDC,IAAlD,EAAwDC,OAAxD,EAAiEC,IAAjE,EAAuEC,MAAvE;AAEA,IAAMC,IAAI,GAAG,CACX;AAAEC,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,KAAK,EAAE,YAA7B;AAA2CC,EAAAA,OAAO,EAAGC,QAAQ,CAACC,EAAT,KAAgB,KAAjB,GAA0B,wBAA1B,GAAqD,cAAzG;AAAyHC,EAAAA,IAAI,EAAEb;AAA/H,CADW,EAEX;AAAEQ,EAAAA,IAAI,EAAE,aAAR;AAAuBC,EAAAA,KAAK,EAAE,aAA9B;AAA6CC,EAAAA,OAAO,EAAGC,QAAQ,CAACC,EAAT,KAAgB,KAAjB,GAA0B,kBAA1B,GAA+C,0BAArG;AAAiIC,EAAAA,IAAI,EAAEd;AAAvI,CAFW,EAGX;AAAES,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,KAAK,EAAE,YAA7B;AAA2CC,EAAAA,OAAO,EAAE,eAApD;AAAqEG,EAAAA,IAAI,EAAEZ;AAA3E,CAHW,EAIX;AAAEO,EAAAA,IAAI,EAAE,MAAR;AAAgBC,EAAAA,KAAK,EAAE,MAAvB;AAA+BC,EAAAA,OAAO,EAAE,SAAxC;AAAmDG,EAAAA,IAAI,EAAEX;AAAzD,CAJW,EAKX;AAAEM,EAAAA,IAAI,EAAE,MAAR;AAAgBC,EAAAA,KAAK,EAAE,MAAvB;AAA+BC,EAAAA,OAAO,EAAE,SAAxC;AAAmDG,EAAAA,IAAI,EAAEV;AAAzD,CALW,EAMX;AAAEK,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,KAAK,EAAE,iBAA1B;AAA6CC,EAAAA,OAAO,EAAE,YAAtD;AAAoEG,EAAAA,IAAI,EAAET;AAA1E,CANW,EAOX;AAAEI,EAAAA,IAAI,EAAE,MAAR;AAAgBC,EAAAA,KAAK,EAAE,MAAvB;AAA+BC,EAAAA,OAAO,EAAE,SAAxC;AAAmDG,EAAAA,IAAI,EAAER;AAAzD,CAPW,EAQX;AAAEG,EAAAA,IAAI,EAAE,QAAR;AAAkBC,EAAAA,KAAK,EAAE,QAAzB;AAAmCC,EAAAA,OAAO,EAAE,WAA5C;AAAyDG,EAAAA,IAAI,EAAEP;AAA/D,CARW,CAAb;;AAWA,IAAMQ,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD,EAAS;AAC9B,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BC,IAAAA,OAAO,CAACC,UAAR,CAAmBJ,GAAnB,EAAwBK,IAAxB,CAA6B,UAACC,MAAD,EAAY;AACvCJ,MAAAA,OAAO,CAAC,CAAC,CAACI,MAAH,CAAP;AACD,KAFD,EAEGC,KAFH,CAES,YAAM;AACbL,MAAAA,OAAO,CAAC,KAAD,CAAP;AACD,KAJD;AAKD,GANM,CAAP;AAOD,CARD;;AAUA,OAAO,IAAMM,OAAO,GAAG,SAAVA,OAAU,GAAM;AAC3B,MAAMC,QAAQ,GAAGjB,IAAI,CAACkB,GAAL,CAAS,UAACV,GAAD;AAAA,WAASD,cAAc,CAACC,GAAG,CAACL,OAAL,CAAd,CAA4BU,IAA5B,CAAiC,UAACM,GAAD;AAAA,aAAUA,GAAD,GAAQX,GAAR,GAAc,IAAvB;AAAA,KAAjC,CAAT;AAAA,GAAT,CAAjB;AAEA,SAAOC,OAAO,CAACW,GAAR,CAAYH,QAAZ,EAAsBJ,IAAtB,CAA2B,UAACQ,cAAD,EAAoB;AACpD,WAAOA,cAAc,CAACC,MAAf,CAAsB,UAACd,GAAD;AAAA,aAAUA,GAAV;AAAA,KAAtB,CAAP;AACD,GAFM,CAAP;AAGD,CANM","sourcesContent":["/*global Promise*/\nimport { Platform, Linking } from 'react-native';\nimport { GoogleMaps, AppleMaps, CityMapper, Uber, Lyft, Transit, Waze, Moovit } from './img';\n\nconst apps = [\n  { name: 'apple-maps', title: 'Apple Maps', prefixe: (Platform.OS === 'ios') ? 'http://maps.apple.com/' : 'applemaps://', icon: AppleMaps },\n  { name: 'google-maps', title: 'Google Maps', prefixe: (Platform.OS === 'ios') ? 'comgooglemaps://' : 'https://maps.google.com/', icon: GoogleMaps },\n  { name: 'citymapper', title: 'Citymapper', prefixe: 'citymapper://', icon: CityMapper },\n  { name: 'uber', title: 'Uber', prefixe: 'uber://', icon: Uber },\n  { name: 'lyft', title: 'Lyft', prefixe: 'lyft://', icon: Lyft },\n  { name: 'transit', title: 'The Transit App', prefixe: 'transit://', icon: Transit },\n  { name: 'waze', title: 'Waze', prefixe: 'waze://', icon: Waze },\n  { name: 'moovit', title: 'Moovit', prefixe: 'moovit://', icon: Moovit },\n];\n\nconst isAppInstalled = (app) => {\n  return new Promise((resolve) => {\n    Linking.canOpenURL(app).then((result) => {\n      resolve(!!result);\n    }).catch(() => {\n      resolve(false);\n    });\n  });\n};\n\nexport const getApps = () => {\n  const promises = apps.map((app) => isAppInstalled(app.prefixe).then((ret) => (ret) ? app : null));\n\n  return Promise.all(promises).then((returnPromises) => {\n    return returnPromises.filter((app) => (app));\n  });\n};\n"]},"metadata":{},"sourceType":"module"}